using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MersinAracKiralama.Data;
using MersinAracKiralama.Models;

namespace MersinAracKiralama.Controllers.Api
{
    [Route("api/[controller]")]
    [ApiController]
    public class RentalsApiController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        public RentalsApiController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: api/rentals
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Rental>>> GetRentals()
        {
            return await _context.Rentals.Include(r => r.Car).Include(r => r.Customer).ToListAsync();
        }

        // GET: api/rentals/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Rental>> GetRental(int id)
        {
            var rental = await _context.Rentals.Include(r => r.Car).Include(r => r.Customer).FirstOrDefaultAsync(r => r.Id == id);
            if (rental == null) return NotFound();
            return rental;
        }

        // POST: api/rentals
        [HttpPost]
        public async Task<ActionResult<Rental>> PostRental(Rental rental)
        {
            _context.Rentals.Add(rental);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetRental), new { id = rental.Id }, rental);
        }

        // PUT: api/rentals/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutRental(int id, Rental rental)
        {
            if (id != rental.Id) return BadRequest();
            _context.Entry(rental).State = EntityState.Modified;
            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_context.Rentals.Any(e => e.Id == id))
                    return NotFound();
                else
                    throw;
            }
            return NoContent();
        }

        // DELETE: api/rentals/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteRental(int id)
        {
            var rental = await _context.Rentals.FindAsync(id);
            if (rental == null) return NotFound();
            _context.Rentals.Remove(rental);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
} 