using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MersinAracKiralama.Data;
using MersinAracKiralama.Models;
using MersinAracKiralama.Services;

namespace MersinAracKiralama.Controllers
{
    public class CustomerController : Controller
    {
        private readonly ICustomerService _customerService;
        public CustomerController(ICustomerService customerService)
        {
            _customerService = customerService;
        }

        // Müşterileri listele
        public async Task<IActionResult> Index()
        {
            return View(await _customerService.GetAllAsync());
        }

        // Detay sayfası
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null) return NotFound();
            var customer = await _customerService.GetByIdAsync(id.Value);
            if (customer == null) return NotFound();
            return View(customer);
        }

        // Yeni müşteri ekle (GET)
        public IActionResult Create()
        {
            return View();
        }

        // Yeni müşteri ekle (POST)
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(Customer customer)
        {
            if (ModelState.IsValid)
            {
                await _customerService.AddAsync(customer);
                return RedirectToAction(nameof(Index));
            }
            return View(customer);
        }

        // Müşteri düzenle (GET)
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();
            var customer = await _customerService.GetByIdAsync(id.Value);
            if (customer == null) return NotFound();
            return View(customer);
        }

        // Müşteri düzenle (POST)
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, Customer customer)
        {
            if (id != customer.Id) return NotFound();
            if (ModelState.IsValid)
            {
                await _customerService.UpdateAsync(customer);
                return RedirectToAction(nameof(Index));
            }
            return View(customer);
        }

        // Müşteri sil (GET)
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();
            var customer = await _customerService.GetByIdAsync(id.Value);
            if (customer == null) return NotFound();
            return View(customer);
        }

        // Müşteri sil (POST)
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            await _customerService.DeleteAsync(id);
            return RedirectToAction(nameof(Index));
        }
    }
} 